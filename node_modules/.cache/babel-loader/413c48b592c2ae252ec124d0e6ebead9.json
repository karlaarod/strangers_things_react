{"ast":null,"code":"var _jsxFileName = \"/Users/karlarodriguez/Desktop/course_work/strangers_thing_react/src/components/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst postMatches = (post, searchTerm) => {\n  const searchTermLowercase = searchTerm.toLowerCase();\n  const {\n    description,\n    location,\n    title,\n    author: {\n      username\n    }\n  } = post;\n  const toMatch = [description, location, title, username];\n\n  for (const field of toMatch) {\n    if (field.toLowerCase().includes(searchTermLowercase)) {\n      return true;\n    }\n  }\n};\n\nconst List = ({\n  posts\n}) => {\n  _s();\n\n  const history = useHistory();\n  const [searchTerm, updateSearchTerm] = useState('');\n  const postsDisplay = searchTerm > 0 ? posts.filter(post => postMatches(post, searchTerm)) : posts;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for posts\",\n        value: searchTerm,\n        onChange: event => {\n          updateSearchTerm(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"SEARCH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), postsDisplay.length > 0 ? postsDisplay.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Posted by: \", post.author.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Description: \", post.description, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          history.push(`/posts/${post._id}`);\n        },\n        children: \"View Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"NO posts to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n};\n\n_s(List, \"QlgU+Jc5j9bpORwT18Umg46G4Os=\", false, function () {\n  return [useHistory];\n});\n\n_c = List;\nexport default List;\n{\n  /* <div className='post-list'>\n  {posts.map((post) => (\n     <div key={post._id} className= 'post'>\n         <h5>{post.title}</h5>\n         <div>Posted by: {post.author.username}</div>\n         <div>Description: {post.description} </div>\n         <button\n             onClick={() => {\n                 history.push(`/posts/${post._id}`);\n             }}>View Post</button>\n     </div>\n  ))}\n  </div> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/karlarodriguez/Desktop/course_work/strangers_thing_react/src/components/List.js"],"names":["React","useState","useHistory","postMatches","post","searchTerm","searchTermLowercase","toLowerCase","description","location","title","author","username","toMatch","field","includes","List","posts","history","updateSearchTerm","postsDisplay","filter","event","target","value","length","map","push","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAqB;AACrC,QAAMC,mBAAmB,GAAED,UAAU,CAACE,WAAX,EAA3B;AACA,QAAK;AACDC,IAAAA,WADC;AAEDC,IAAAA,QAFC;AAGDC,IAAAA,KAHC;AAIDC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAJP,MAKDR,IALJ;AAOA,QAAMS,OAAO,GAAG,CAACL,WAAD,EAAcC,QAAd,EAAwBC,KAAxB,EAA+BE,QAA/B,CAAhB;;AACA,OAAK,MAAME,KAAX,IAAoBD,OAApB,EAA4B;AACxB,QAAIC,KAAK,CAACP,WAAN,GAAoBQ,QAApB,CAA6BT,mBAA7B,CAAJ,EAAsD;AAClD,aAAO,IAAP;AACH;AACJ;AACJ,CAfD;;AAiBA,MAAMU,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AACxB,QAAMC,OAAO,GAAGhB,UAAU,EAA1B;AACA,QAAM,CAACG,UAAD,EAAac,gBAAb,IAAiClB,QAAQ,CAAE,EAAF,CAA/C;AAEA,QAAMmB,YAAY,GAAGf,UAAU,GAAG,CAAb,GACrBY,KAAK,CAACI,MAAN,CAAcjB,IAAD,IAAUD,WAAW,CAACC,IAAD,EAAOC,UAAP,CAAlC,CADqB,GACmCY,KADxD;AAGA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AACA,QAAA,IAAI,EAAG,MADP;AAEA,QAAA,WAAW,EAAE,kBAFb;AAGA,QAAA,KAAK,EAAGZ,UAHR;AAIA,QAAA,QAAQ,EAAIiB,KAAD,IAAU;AACjBH,UAAAA,gBAAgB,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;AACH;AAND;AAAA;AAAA;AAAA;AAAA,cAFA,eAUC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVD;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAaMJ,YAAY,CAACK,MAAb,GAAsB,CAAtB,GACEL,YAAY,CAACM,GAAb,CAAmBtB,IAAF,iBACb;AAAqB,MAAA,SAAS,EAAE,MAAhC;AAAA,8BACJ;AAAA,kBAAKA,IAAI,CAACM;AAAV;AAAA;AAAA;AAAA;AAAA,cADI,eAEJ;AAAA,kCAAiBN,IAAI,CAACO,MAAL,CAAYC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFI,eAGJ;AAAA,oCAAmBR,IAAI,CAACI,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHI,eAIJ;AACI,QAAA,OAAO,EAAE,MAAM;AACfU,UAAAA,OAAO,CAACS,IAAR,CAAc,UAASvB,IAAI,CAACwB,GAAI,EAAhC;AACC,SAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJI;AAAA,OAAWxB,IAAI,CAACwB,GAAhB;AAAA;AAAA;AAAA;AAAA,YADJ,CADF,gBAaM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BZ;AAAA,kBADJ;AA+BH,CAtCD;;GAAMZ,I;UACcd,U;;;KADdc,I;AAwCN,eAAeA,IAAf;AAGA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAU","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst postMatches = (post, searchTerm) =>{\n    const searchTermLowercase= searchTerm.toLowerCase();\n    const{ \n        description, \n        location, \n        title, \n        author: { username }\n    } = post;\n\n    const toMatch = [description, location, title, username];\n    for (const field of toMatch){\n        if (field.toLowerCase().includes(searchTermLowercase)){\n            return true;\n        }\n    }\n}\n\nconst List = ({ posts }) => {\n    const history = useHistory();\n    const [searchTerm, updateSearchTerm] = useState ('')\n\n    const postsDisplay = searchTerm > 0 ?\n    posts.filter((post) => postMatches(post, searchTerm)) : posts;\n\n    return (\n        <>\n            <div className='post-list'>\n            <h2>Posts</h2>\n            <input\n            type = 'text'\n            placeholder= 'Search for posts'\n            value= {searchTerm}\n            onChange= {(event)=> {\n                updateSearchTerm(event.target.value);\n            }} \n            />\n             <button>SEARCH</button>\n            </div>\n            { postsDisplay.length > 0 ? (\n                postsDisplay.map(( post ) => (\n                    <div key= {post._id} className= 'post'>\n                <h5>{post.title}</h5>\n                <div>Posted by: {post.author.username}</div>\n                <div>Description: {post.description} </div>\n                <button\n                    onClick={() => {\n                    history.push(`/posts/${post._id}`);\n                    }}>View Post</button>\n                    </div>\n                    ))\n                ) : (\n                    <h5>NO posts to display</h5>\n            )}\n        </>\n    );\n};\n\nexport default List;\n\n\n{/* <div className='post-list'>\n{posts.map((post) => (\n    <div key={post._id} className= 'post'>\n        <h5>{post.title}</h5>\n        <div>Posted by: {post.author.username}</div>\n        <div>Description: {post.description} </div>\n        <button\n            onClick={() => {\n                history.push(`/posts/${post._id}`);\n            }}>View Post</button>\n    </div>\n))}\n</div> */}\n"]},"metadata":{},"sourceType":"module"}